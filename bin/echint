#!/usr/bin/env node

'use strict'

var chalk = require('chalk')
var cmd = require('commander')
var echint = require('..')
var pkg = require('../package.json')

function collect (val, memo) {
  memo.push(val)
  return memo
}

cmd
  .version(pkg.version)
  .usage('[options] <file ...>')
  .option('-c, --config [path]', 'specify path for config file (defaults to ./.editorconfig)')
  .option('-i, --ignore [file]', 'files to ignore', collect)
  .option('-p, --skip-package', 'whether to skip reading config info from package.json')
  .option('-q, --quiet', 'shhh')
  .option('-v, --verbose', 'detailed errors')
  .parse(process.argv)

// add files to check
if (!cmd.args.length) {
  cmd.files = cmd.args
}

// alias
cmd.readPackage = !cmd.skipPackage

echint(cmd, function (errors, valid) {
  if (valid) {
    return
  }

  var files = Object.keys(errors)

  // print errors
  if (!cmd.quiet && !valid) {
    console.error('%s %d file(s) did not pass EditorConfig validation', chalk.red('Error:'), files.length)
  }

  if (!cmd.quiet) {
    files.forEach(function (file) {
      Object.keys(errors[file]).forEach(function (number) {
        var line = errors[file][number]

        line.forEach(function (err) {
          console.error('  %s:%s %s', chalk.yellow(file), chalk.red(number), chalk.dim(err.message))
        })
      })
    })
  }

  // send error signal
  if (!valid) {
    process.exit(1)
  }
})
